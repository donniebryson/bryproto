/* Donald, I found your program on GENIE and made some small mods to handle
quoted string, the {}() tokens that are enclosed in single quotes, and
modified the output routine to be a little faster.  Hope you don't mind
the Mods I made.  Thought you would like to see them.
I also added the ability to recognize the C++ style of comments, the
// kind.
Jim Derr, California Software Design, 707-575-9868.
BTW Thanks for dist. the source code.
*/



/* FILE NAME: BRYPROTO.C version 1.0 */
/* Copyright 1992, Donald Bryson, 3421 Elder Mountain Rd., Chattanooga, TN 37419
Phone: (615) 821-5757, E-Mail Bix: donbryson, GEnie: D.BRYSON2 */

/* Accepts name of directory and generates a file named FUNCTION.H that
contains function prototypes for all functions that are typed with the
following format
returntype FunctionName(type name1, type nam2)
{
	functionbody;
	;
	;

}
from each file containing a *.C extension. */

#include <stdio.h>
#include <time.h>
#include <dir.h>
#include <string.h>

#define MAXFILES 128			/* Maximum number of source files */
#define MPATH 128				/* Maximum full path */
#define MAXLINE 256				/* You should never have a maximum line greater than this */

unsigned int QuoteCount;        /*Used to determine if inside or outside quoted string*/
unsigned int BraceCount;		/* Used to determine if inside or outside function */
unsigned int ParenCount;		/* Used to determine end of function parameters */
char Comment;

FILE *outfile;

char FileName[MAXFILES][MPATH];

void CheckFile(char *fn);
void CheckLine(char *String);


void main(int argc, char *argv[]) {
	int done, numfiles, counter;
	time_t t;
	struct ffblk ffblk;

	char StartDir[MPATH];
	char WorkDir[MPATH];

	getcwd(StartDir, MPATH);
	if ( argc == 2 ) {
		strcpy(WorkDir, argv[1]);
		if ( (chdir(WorkDir)) == -1) {
			fprintf(stderr, "Unable to check directory %s\n", WorkDir);
			return;
		}
	} else {
		strcpy(WorkDir, StartDir);
	}

	time(&t);

	fprintf(stdout, "BryProto -- Copyright 1992 Bryson Research and Development\n");
	fprintf(stdout, "3421 Elder Mtn. Rd., Chattanooga TN  37419, (615) 821-5757\n");


	if ( NULL == (outfile=fopen("FUNCTION.H", "w") ) ) {
		return;
	} else {
		fprintf(outfile, "/* Header file generated by BryProto on ");
		fprintf(outfile, "%s", ctime(&t));
	}

	fprintf(outfile, "The following files were checked from the %s directory:\n", WorkDir);

	/* Load up the file names and paths */
	done = findfirst("*.C",&ffblk,0);
	numfiles = 0;
	while (!done) {
		sprintf(FileName[numfiles], "%s", ffblk.ff_name);
		fprintf(outfile, "\t%s\n", ffblk.ff_name);
		done = findnext(&ffblk);
		++numfiles;
	}
	fprintf(outfile, "*/\n\n");

	counter = 0;

	while ( counter < numfiles ) {
		printf("Checking: %s\n", FileName[counter]);
		CheckFile(FileName[counter]);
		++counter;
	}

	chdir(StartDir);
}

void CheckFile(char *fn)
{
	FILE *infile;
	char String[MAXLINE];

	if ( (infile=fopen(fn, "rt")) == NULL) {
		fprintf(stderr, "Unable to open %s\n", fn);
		return;
	}

	fprintf(outfile, "/* Functions from %s */\n", fn);

	while ( fgets(String, MAXLINE, infile) ) {
		CheckLine(String);
	}
	fclose(infile);
	ParenCount = 0;
	BraceCount = 0;
	Comment = 0;
}

void CheckLine(char *String)
{
	char *Ptr;
    char *Last;
	int WasComm = 0;
    int DropRest = 0;
	Ptr = String;

	while ( *Ptr ) {

		switch(*Ptr) {
            case '"':
                if(Ptr > String) {
                    if(*(Ptr-1) == '\\' && *(Ptr-2) != '\\') break;
                        /*IF LOOKING AT \\" IGNORE QUOTE*/
                }
                if(QuoteCount) {
                    --QuoteCount;
                    break;
                }
                ++QuoteCount;
                break;
			case '{':
                if(Ptr > String) {      /*IGNORE '{'*/
                    if(*(Ptr-1) == '\'' && *(Ptr+1) == '\'') break;
                }
                if(QuoteCount) break;  /*IF IN QUOTED STRING IGNORE*/
				++BraceCount;
				break;
			case '}':
                if(Ptr > String) {      /*IGNORE '}'*/
                    if(*(Ptr-1) == '\'' && *(Ptr+1) == '\'') break;
                }
                if(QuoteCount) break;   /*IF IN QUOTED STRING IGNORE*/
                --BraceCount;
				break;
			case '(':
                if(Ptr > String) {      /*IGNORE '('*/
                    if(*(Ptr-1) == '\'' && *(Ptr+1) == '\'') break;
                }
                if(QuoteCount) break;   /*IF IN QUOTED STRING IGNORE*/
                ++ParenCount;
				break;
            case ')':                   /*IGNORE ')'*/
                if(Ptr > String) {
                    if(*(Ptr-1) == '\'' && *(Ptr+1) == '\'') break;
                }
                if(QuoteCount) break;   /*IF IN QUOTED STRING IGNORE*/
                --ParenCount;
                Last = Ptr;
				break;
			case '*':
                if(Ptr > String) {      /*IGNORE '*'*/
                    if(*(Ptr-1) == '\'' && *(Ptr+1) == '\'') break;
                }
                if(QuoteCount) break;   /*IF IN QUOTED STRING IGNORE*/
                if ( *(Ptr+1) == '/' ) {
					--Comment;
					WasComm = 1;
				}
				break;
            case '/':                   /*IF IN QUOTED STRING IGNORE*/
                if(QuoteCount) break;
                if(*(Ptr+1) == '/') {   /*IF TWO / IN ROW DROP REST OF LINE*/
                    ++DropRest;         /*IT IS A C++ STYLE COMMENT RECORD*/
                    break;
                }
                if ( *(Ptr+1) == '*' ) {
                    if(Comment) break;
					++Comment;
                }
				break;
		}

        if(DropRest) break;
		++Ptr;

	}

	if ( Comment || WasComm ) {
		return;
	} else if ( !BraceCount && !ParenCount && strstr(String,"(") && strstr(String,")") ) {
		if ( !(strstr(String, ";")) ) {
            Last = strrchr(String,')');           /*A LITTLE FASTER OUTPUT*/
            *Last = 0;                            /*A LITTLE FASTER OUTPUT*/
            fputs(String,outfile);                /*A LITTLE FASTER OUTPUT*/
            fputs(");\n", outfile);
		}
	} else {
		return;
	}

}
